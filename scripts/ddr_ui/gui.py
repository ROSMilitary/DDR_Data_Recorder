#! /usr/bin/python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Sep 17, 2020 03:45:41 PM EDT  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = ddrWindow (root)
    gui_support.init(root, top)
    root.mainloop()

w = None
def create_ddrWindow(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ddrWindow(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = ddrWindow (w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ddrWindow():
    global w
    w.destroy()
    w = None

class ddrWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans Mono} -size 12"
        font14 = "-family {DejaVu Sans} -size 0"
        font21 = "TkDefaultFont"
        font26 = "TkDefaultFont"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("792x935+2624+137")
        top.minsize(1, 1)
        top.maxsize(5745, 1050)
        top.resizable(0, 0)
        top.title("Data Director Revolution")
        top.configure(highlightbackground="#464646")
        top.configure(highlightcolor="black")

        self.lbl_alert = tk.Label(top)
        self.lbl_alert.place(relx=0.0, rely=0.545, height=28, width=66)
        self.lbl_alert.configure(activebackground="#f9f9f9")
        self.lbl_alert.configure(anchor='w')
        self.lbl_alert.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.lbl_alert.configure(text='''Alert:''')

        self.lbl_health = tk.Label(top)
        self.lbl_health.place(relx=0.0, rely=0.77, height=28, width=66)
        self.lbl_health.configure(activebackground="#f9f9f9")
        self.lbl_health.configure(anchor='w')
        self.lbl_health.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.lbl_health.configure(text='''Health:''')

        self.menubar = tk.Menu(top,font=font14,bg='#464646',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.t_notebook = ttk.Notebook(top)
        self.t_notebook.place(relx=0.0, rely=0.0, relheight=0.538, relwidth=1.0)
        self.t_notebook_t0 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t0, padding=3)
        self.t_notebook.tab(0, text="Record",compound="left",underline="-1",)
        self.t_notebook_t1 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t1, padding=3)
        self.t_notebook.tab(1, text="View",compound="left",underline="-1",)
        self.t_notebook_t2 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t2, padding=3)
        self.t_notebook.tab(2, text="Delete",compound="none",underline="-1",)
        self.t_notebook_t3 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t3, padding=3)
        self.t_notebook.tab(3, text="Mileage",compound="none",underline="-1",)
        self.t_notebook_t4 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t4, padding=3)
        self.t_notebook.tab(4, text="Topics",compound="none",underline="-1",)
        self.t_notebook_t5 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t5, padding=3)
        self.t_notebook.tab(5, text="Health",compound="none",underline="-1",)
        self.t_notebook_t6 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t6, padding=3)
        self.t_notebook.tab(6, text="KML Publisher", compound="none"
                ,underline="-1", )
        self.t_notebook_t7 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t7, padding=3)
        self.t_notebook.tab(7, text="Hot Keys",compound="none",underline="-1",)
        self.t_notebook_t8 = tk.Frame(self.t_notebook)
        self.t_notebook.add(self.t_notebook_t8, padding=3)
        self.t_notebook.tab(8, text="Versioning", compound="none", underline="-1"
                ,)

        self.label_frame2 = tk.LabelFrame(self.t_notebook_t0)
        self.label_frame2.place(relx=0.013, rely=0.021, relheight=0.948
                , relwidth=0.975)
        self.label_frame2.configure(relief='groove')
        self.label_frame2.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.label_frame2.configure(text='''Data Director Revolution''')

        self.btn_shadow = tk.Button(self.label_frame2)
        self.btn_shadow.place(relx=0.039, rely=0.242, height=318, width=339
                , bordermode='ignore')
        self.btn_shadow.configure(activebackground="#f9f9f9")
        self.btn_shadow.configure(command=gui_support.shadow)
        self.btn_shadow.configure(font="-family {DejaVu Sans} -size 36")
        self.btn_shadow.configure(text='''Shadow''')

        self.btn_manual = tk.Button(self.label_frame2)
        self.btn_manual.place(relx=0.506, rely=0.242, height=318, width=339
                , bordermode='ignore')
        self.btn_manual.configure(activebackground="#f9f9f9")
        self.btn_manual.configure(command=gui_support.manual)
        self.btn_manual.configure(font="-family {DejaVu Sans} -size 36")
        self.btn_manual.configure(text='''Manual''')

        self.ent_rec_name = tk.Entry(self.label_frame2)
        self.ent_rec_name.place(relx=0.325, rely=0.154, height=30, relwidth=0.618
                , bordermode='ignore')
        self.ent_rec_name.configure(background="white")
        self.ent_rec_name.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.ent_rec_name.configure(justify='right')
        self.ent_rec_name.configure(selectbackground="#c4c4c4")

        self.lbl_rec_name = tk.Label(self.label_frame2)
        self.lbl_rec_name.place(relx=0.039, rely=0.154, height=29, width=207
                , bordermode='ignore')
        self.lbl_rec_name.configure(activebackground="#f9f9f9")
        self.lbl_rec_name.configure(font="-family {DejaVu Sans} -size 0")
        self.lbl_rec_name.configure(text='''Manual Recording Name:''')

        self.lbl_active_kml = tk.Label(self.label_frame2)
        self.lbl_active_kml.place(relx=0.039, rely=0.088, height=18, width=97
                , bordermode='ignore')
        self.lbl_active_kml.configure(activebackground="#f9f9f9")
        self.lbl_active_kml.configure(font="-family {DejaVu Sans} -size 12")
        self.lbl_active_kml.configure(text='''Active KML:''')

        self.txtbox_active_kml = tk.Entry(self.label_frame2)
        self.txtbox_active_kml.place(relx=0.325, rely=0.066, height=30
                , relwidth=0.618, bordermode='ignore')
        self.txtbox_active_kml.configure(background="white")
        self.txtbox_active_kml.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.txtbox_active_kml.configure(justify='right')
        self.txtbox_active_kml.configure(selectbackground="#c4c4c4")
        self.txtbox_active_kml.configure(state='readonly')

        self.path_entry = tk.Entry(self.t_notebook_t1)
        self.path_entry.place(relx=0.304, rely=0.021,height=30, relwidth=0.678)
        self.path_entry.configure(background="white")
        self.path_entry.configure(font="TkFixedFont")
        self.path_entry.configure(selectbackground="#c4c4c4")

        self.record_directory_label = tk.Label(self.t_notebook_t1)
        self.record_directory_label.place(relx=0.025, rely=0.021, height=28
                , width=201)
        self.record_directory_label.configure(activebackground="#f9f9f9")
        self.record_directory_label.configure(font="-family {DejaVu Sans} -size 0")
        self.record_directory_label.configure(text='''Recorded Bag Directory:''')

        self.recordings_label_frame = tk.LabelFrame(self.t_notebook_t1)
        self.recordings_label_frame.place(relx=0.013, rely=0.104, relheight=0.885
                , relwidth=0.43)
        self.recordings_label_frame.configure(relief='groove')
        self.recordings_label_frame.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.recordings_label_frame.configure(text='''Recordings:''')

        self.directory_of_bags_scroll = ScrolledListBox(self.recordings_label_frame)
        self.directory_of_bags_scroll.place(relx=0.029, rely=0.047
                , relheight=0.939, relwidth=0.929, bordermode='ignore')
        self.directory_of_bags_scroll.configure(background="white")
        self.directory_of_bags_scroll.configure(cursor="xterm")
        self.directory_of_bags_scroll.configure(font=font21)
        self.directory_of_bags_scroll.configure(highlightcolor="#d9d9d9")
        self.directory_of_bags_scroll.configure(selectbackground="#c4c4c4")
        self.directory_of_bags_scroll.configure(selectmode='single')
        self.directory_of_bags_scroll.bind('<<ListboxSelect>>',gui_support.on_enter)

        self.previews_label_frame = tk.LabelFrame(self.t_notebook_t1)
        self.previews_label_frame.place(relx=0.456, rely=0.104, relheight=0.885
                , relwidth=0.532)
        self.previews_label_frame.configure(relief='groove')
        self.previews_label_frame.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.previews_label_frame.configure(text='''Previews:''')

        self.markdown_viewer = ScrolledListBox(self.previews_label_frame)
        self.markdown_viewer.place(relx=0.024, rely=0.047, relheight=0.939
                , relwidth=0.943, bordermode='ignore')
        self.markdown_viewer.configure(background="white")
        self.markdown_viewer.configure(cursor="xterm")
        self.markdown_viewer.configure(font=font21)
        self.markdown_viewer.configure(highlightcolor="#d9d9d9")
        self.markdown_viewer.configure(selectbackground="#c4c4c4")

        self.delete_frame = tk.LabelFrame(self.t_notebook_t2)
        self.delete_frame.place(relx=0.013, rely=0.021, relheight=0.948
                , relwidth=0.582)
        self.delete_frame.configure(relief='groove')
        self.delete_frame.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.delete_frame.configure(text='''Recordings''')

        self.dir_of_bags_scroll_copy = ScrolledListBox(self.delete_frame)
        self.dir_of_bags_scroll_copy.place(relx=0.022, rely=0.044
                , relheight=0.943, relwidth=0.948, bordermode='ignore')
        self.dir_of_bags_scroll_copy.configure(background="white")
        self.dir_of_bags_scroll_copy.configure(cursor="xterm")
        self.dir_of_bags_scroll_copy.configure(font=font21)
        self.dir_of_bags_scroll_copy.configure(highlightcolor="#d9d9d9")
        self.dir_of_bags_scroll_copy.configure(selectbackground="#c4c4c4")
        self.dir_of_bags_scroll_copy.configure(selectmode='extended')

        self.delete_btn = tk.Button(self.t_notebook_t2)
        self.delete_btn.place(relx=0.646, rely=0.042, height=198, width=229)
        self.delete_btn.configure(activebackground="#f9f9f9")
        self.delete_btn.configure(command=gui_support.delete_records)
        self.delete_btn.configure(font="-family {DejaVu Sans} -size 30")
        self.delete_btn.configure(text='''Delete''')

        self.refresh_btn = tk.Button(self.t_notebook_t2)
        self.refresh_btn.place(relx=0.646, rely=0.542, height=198, width=229)
        self.refresh_btn.configure(activebackground="#f9f9f9")
        self.refresh_btn.configure(command=gui_support.refresh_records)
        self.refresh_btn.configure(font="-family {DejaVu Sans} -size 30")
        self.refresh_btn.configure(text='''Refresh''')

        self.speed_label = tk.Label(self.t_notebook_t3)
        self.speed_label.place(relx=0.228, rely=0.167, height=64, width=430)
        self.speed_label.configure(activebackground="#f9f9f9")
        self.speed_label.configure(font="-family {DejaVu Sans} -size 48")
        self.speed_label.configure(text='''000.0 km/hr''')

        self.dist_counter_label = tk.Label(self.t_notebook_t3)
        self.dist_counter_label.place(relx=0.177, rely=0.438, height=74
                , width=520)
        self.dist_counter_label.configure(activebackground="#f9f9f9")
        self.dist_counter_label.configure(font="-family {DejaVu Sans} -size 48")
        self.dist_counter_label.configure(text='''0000000.00 km''')

        self.btn_start_ctr = tk.Button(self.t_notebook_t3)
        self.btn_start_ctr.place(relx=0.114, rely=0.729, height=58, width=158)
        self.btn_start_ctr.configure(activebackground="#f9f9f9")
        self.btn_start_ctr.configure(command=gui_support.start_mileage_ctr)
        self.btn_start_ctr.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_start_ctr.configure(state='disabled')
        self.btn_start_ctr.configure(text='''Start''')

        self.btn_stop_ctr = tk.Button(self.t_notebook_t3)
        self.btn_stop_ctr.place(relx=0.405, rely=0.729, height=58, width=156)
        self.btn_stop_ctr.configure(activebackground="#f9f9f9")
        self.btn_stop_ctr.configure(command=gui_support.stop_mileage_ctr)
        self.btn_stop_ctr.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_stop_ctr.configure(text='''Stop''')

        self.btn_reset_ctr = tk.Button(self.t_notebook_t3)
        self.btn_reset_ctr.place(relx=0.696, rely=0.729, height=58, width=161)
        self.btn_reset_ctr.configure(activebackground="#f9f9f9")
        self.btn_reset_ctr.configure(command=gui_support.reset_mileage_ctr)
        self.btn_reset_ctr.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_reset_ctr.configure(text='''Reset''')

        self.all_topics_label_frame = tk.LabelFrame(self.t_notebook_t4)
        self.all_topics_label_frame.place(relx=0.506, rely=0.021, relheight=0.969
                , relwidth=0.481)
        self.all_topics_label_frame.configure(relief='groove')
        self.all_topics_label_frame.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.all_topics_label_frame.configure(text='''All Topics''')

        self.all_topics_scroll_lb = ScrolledListBox(self.all_topics_label_frame)
        self.all_topics_scroll_lb.place(relx=0.026, rely=0.043, relheight=0.933
                , relwidth=0.937, bordermode='ignore')
        self.all_topics_scroll_lb.configure(background="white")
        self.all_topics_scroll_lb.configure(cursor="xterm")
        self.all_topics_scroll_lb.configure(font=font21)
        self.all_topics_scroll_lb.configure(highlightcolor="#d9d9d9")
        self.all_topics_scroll_lb.configure(selectbackground="#c4c4c4")

        self.active_topics_label_frame = tk.LabelFrame(self.t_notebook_t4)
        self.active_topics_label_frame.place(relx=0.013, rely=0.021
                , relheight=0.969, relwidth=0.481)
        self.active_topics_label_frame.configure(relief='groove')
        self.active_topics_label_frame.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.active_topics_label_frame.configure(text='''Active Topics''')

        self.active_topics_scroll_lb = ScrolledListBox(self.active_topics_label_frame)
        self.active_topics_scroll_lb.place(relx=0.026, rely=0.043
                , relheight=0.933, relwidth=0.937, bordermode='ignore')
        self.active_topics_scroll_lb.configure(background="white")
        self.active_topics_scroll_lb.configure(cursor="xterm")
        self.active_topics_scroll_lb.configure(font=font21)
        self.active_topics_scroll_lb.configure(highlightcolor="#d9d9d9")
        self.active_topics_scroll_lb.configure(selectbackground="#c4c4c4")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.health_scrolled_treeview = ScrolledTreeView(self.t_notebook_t5)
        self.health_scrolled_treeview.place(relx=0.013, rely=0.021
                , relheight=0.871, relwidth=0.975)
        self.health_scrolled_treeview.configure(columns="expectedHz actualHz")
        # build_treeview_support starting.
        self.health_scrolled_treeview.heading("#0",text="Tree")
        self.health_scrolled_treeview.heading("#0",anchor="center")
        self.health_scrolled_treeview.column("#0",width="308")
        self.health_scrolled_treeview.column("#0",minwidth="20")
        self.health_scrolled_treeview.column("#0",stretch="1")
        self.health_scrolled_treeview.column("#0",anchor="w")
        self.health_scrolled_treeview.heading("expectedHz",anchor="center")
        self.health_scrolled_treeview.column("expectedHz",width="224")
        self.health_scrolled_treeview.column("expectedHz",minwidth="20")
        self.health_scrolled_treeview.column("expectedHz",stretch="1")
        self.health_scrolled_treeview.column("expectedHz",anchor="w")
        self.health_scrolled_treeview.heading("actualHz",anchor="center")
        self.health_scrolled_treeview.column("actualHz",width="224")
        self.health_scrolled_treeview.column("actualHz",minwidth="20")
        self.health_scrolled_treeview.column("actualHz",stretch="1")
        self.health_scrolled_treeview.column("actualHz",anchor="w")

        self.valid_lbl = tk.Label(self.t_notebook_t5)
        self.valid_lbl.place(relx=0.076, rely=0.917, height=29, width=37)
        self.valid_lbl.configure(activebackground="#f9f9f9")
        self.valid_lbl.configure(anchor='e')
        self.valid_lbl.configure(font="-family {DejaVu Sans} -size 10")
        self.valid_lbl.configure(text='''Valid''')

        self.not_found_lbl = tk.Label(self.t_notebook_t5)
        self.not_found_lbl.place(relx=0.354, rely=0.917, height=29, width=70)
        self.not_found_lbl.configure(activebackground="#f9f9f9")
        self.not_found_lbl.configure(anchor='e')
        self.not_found_lbl.configure(font="-family {DejaVu Sans} -size 10")
        self.not_found_lbl.configure(text='''Not Found''')

        self.invalid_lbl = tk.Label(self.t_notebook_t5)
        self.invalid_lbl.place(relx=0.646, rely=0.917, height=29, width=68)
        self.invalid_lbl.configure(activebackground="#f9f9f9")
        self.invalid_lbl.configure(anchor='e')
        self.invalid_lbl.configure(font="-family {DejaVu Sans} -size 10")
        self.invalid_lbl.configure(text='''Invalid''')

        self.valid_canvas = tk.Canvas(self.t_notebook_t5)
        self.valid_canvas.place(relx=0.139, rely=0.917, relheight=0.065
                , relwidth=0.153)
        self.valid_canvas.configure(borderwidth="2")
        self.valid_canvas.configure(relief="ridge")
        self.valid_canvas.configure(selectbackground="#c4c4c4")

        self.not_found_canvas = tk.Canvas(self.t_notebook_t5)
        self.not_found_canvas.place(relx=0.456, rely=0.917, relheight=0.065
                , relwidth=0.153)
        self.not_found_canvas.configure(borderwidth="2")
        self.not_found_canvas.configure(relief="ridge")
        self.not_found_canvas.configure(selectbackground="#c4c4c4")

        self.invalid_canvas = tk.Canvas(self.t_notebook_t5)
        self.invalid_canvas.place(relx=0.747, rely=0.917, relheight=0.065
                , relwidth=0.153)
        self.invalid_canvas.configure(borderwidth="2")
        self.invalid_canvas.configure(relief="ridge")
        self.invalid_canvas.configure(selectbackground="#c4c4c4")

        self.all_modes_label_frame = tk.LabelFrame(self.t_notebook_t6)
        self.all_modes_label_frame.place(relx=0.013, rely=0.042, relheight=0.76
                , relwidth=0.442)
        self.all_modes_label_frame.configure(relief='groove')
        self.all_modes_label_frame.configure(text='''All Modes''')

        self.all_mode_scroll_lb = ScrolledListBox(self.all_modes_label_frame)
        self.all_mode_scroll_lb.place(relx=0.029, rely=0.055, relheight=0.915
                , relwidth=0.931, bordermode='ignore')
        self.all_mode_scroll_lb.configure(background="white")
        self.all_mode_scroll_lb.configure(cursor="xterm")
        self.all_mode_scroll_lb.configure(font=font10)
        self.all_mode_scroll_lb.configure(highlightcolor="#d9d9d9")
        self.all_mode_scroll_lb.configure(selectbackground="#c4c4c4")
        self.all_mode_scroll_lb.configure(selectmode='extended')

        self.active_modes_label_frame = tk.LabelFrame(self.t_notebook_t6)
        self.active_modes_label_frame.place(relx=0.544, rely=0.042
                , relheight=0.76, relwidth=0.443)
        self.active_modes_label_frame.configure(relief='groove')
        self.active_modes_label_frame.configure(text='''Active Modes''')

        self.active_modes_scroll_lb = ScrolledListBox(self.active_modes_label_frame)
        self.active_modes_scroll_lb.place(relx=0.029, rely=0.055, relheight=0.912
                , relwidth=0.934, bordermode='ignore')
        self.active_modes_scroll_lb.configure(background="white")
        self.active_modes_scroll_lb.configure(cursor="xterm")
        self.active_modes_scroll_lb.configure(font=font10)
        self.active_modes_scroll_lb.configure(highlightcolor="#d9d9d9")
        self.active_modes_scroll_lb.configure(selectbackground="#c4c4c4")
        self.active_modes_scroll_lb.configure(selectmode='extended')

        self.btn_reset_btn = tk.Button(self.t_notebook_t6)
        self.btn_reset_btn.place(relx=0.152, rely=0.854, height=48, width=129)
        self.btn_reset_btn.configure(activebackground="#f9f9f9")
        self.btn_reset_btn.configure(command=gui_support.reset_btn_click)
        self.btn_reset_btn.configure(text='''Reset''')

        self.btn_add_ctr = tk.Button(self.t_notebook_t6)
        self.btn_add_ctr.place(relx=0.468, rely=0.229, height=38, width=49)
        self.btn_add_ctr.configure(activebackground="#f9f9f9")
        self.btn_add_ctr.configure(command=gui_support.add_btn_click)
        self.btn_add_ctr.configure(text='''>>''')

        self.btn_remove_ctr = tk.Button(self.t_notebook_t6)
        self.btn_remove_ctr.place(relx=0.468, rely=0.583, height=38, width=49)
        self.btn_remove_ctr.configure(activebackground="#f9f9f9")
        self.btn_remove_ctr.configure(command=gui_support.remove_btn_click)
        self.btn_remove_ctr.configure(text='''<<''')

        self.btn_submit_ctr = tk.Button(self.t_notebook_t6)
        self.btn_submit_ctr.place(relx=0.684, rely=0.854, height=48, width=129)
        self.btn_submit_ctr.configure(activebackground="#f9f9f9")
        self.btn_submit_ctr.configure(command=gui_support.submit_btn_click)
        self.btn_submit_ctr.configure(text='''Submit''')

        self.btn_submit_status = tk.Listbox(self.t_notebook_t6)
        self.btn_submit_status.place(relx=0.911, rely=0.813, relheight=0.071
                , relwidth=0.056)
        self.btn_submit_status.configure(background="#ff1f0f")
        self.btn_submit_status.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.btn_submit_status.configure(selectbackground="#c4c4c4")

        self.Labelframe1 = tk.LabelFrame(self.t_notebook_t7)
        self.Labelframe1.place(relx=0.025, rely=0.104, relheight=0.677
                , relwidth=0.937)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''All Events ListBox''')

        self.all_events_lb = ScrolledListBox(self.Labelframe1)
        self.all_events_lb.place(relx=0.014, rely=0.062, relheight=0.895
                , relwidth=0.981, bordermode='ignore')
        self.all_events_lb.configure(background="white")
        self.all_events_lb.configure(cursor="xterm")
        self.all_events_lb.configure(font=font26)
        self.all_events_lb.configure(highlightcolor="#d9d9d9")
        self.all_events_lb.configure(selectbackground="#c4c4c4")
        self.all_events_lb.configure(selectmode='extended')

        self.btn_lock = tk.Button(self.t_notebook_t7)
        self.btn_lock.place(relx=0.089, rely=0.813, height=68, width=269)
        self.btn_lock.configure(activebackground="#f9f9f9")
        self.btn_lock.configure(command=gui_support.btn_lock_click)
        self.btn_lock.configure(text='''Lock''')

        self.current_time_lbl = tk.Label(self.t_notebook_t7)
        self.current_time_lbl.place(relx=0.038, rely=0.021, height=38, width=236)

        self.current_time_lbl.configure(activebackground="#f9f9f9")
        self.current_time_lbl.configure(text='''Current Time''')

        self.locked_time_lbl = tk.Label(self.t_notebook_t7)
        self.locked_time_lbl.place(relx=0.595, rely=0.021, height=38, width=287)
        self.locked_time_lbl.configure(activebackground="#f9f9f9")
        self.locked_time_lbl.configure(text='''Locked Time''')

        self.btn_publish = tk.Button(self.t_notebook_t7)
        self.btn_publish.place(relx=0.544, rely=0.813, height=68, width=271)
        self.btn_publish.configure(activebackground="#f9f9f9")
        self.btn_publish.configure(command=gui_support.btn_publish_click)
        self.btn_publish.configure(text='''Publish''')

        self.lbl_ui_one_version = tk.Label(self.t_notebook_t8)
        self.lbl_ui_one_version.place(relx=0.203, rely=0.375, height=28
                , width=139)
        self.lbl_ui_one_version.configure(activebackground="#f9f9f9")
        self.lbl_ui_one_version.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.lbl_ui_one_version.configure(text='''UI_1 Version''')

        self.lbl_ui_two_version = tk.Label(self.t_notebook_t8)
        self.lbl_ui_two_version.place(relx=0.203, rely=0.563, height=28
                , width=133)
        self.lbl_ui_two_version.configure(activebackground="#f9f9f9")
        self.lbl_ui_two_version.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.lbl_ui_two_version.configure(text='''UI_2 Version''')

        self.lbl_vendor = tk.Label(self.t_notebook_t8)
        self.lbl_vendor.place(relx=0.203, rely=0.729, height=28, width=75)
        self.lbl_vendor.configure(activebackground="#f9f9f9")
        self.lbl_vendor.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.lbl_vendor.configure(text='''Vendor''')

        self.lbl_autonomy_version = tk.Label(self.t_notebook_t8)
        self.lbl_autonomy_version.place(relx=0.203, rely=0.188, height=28
                , width=174)
        self.lbl_autonomy_version.configure(activebackground="#f9f9f9")
        self.lbl_autonomy_version.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.lbl_autonomy_version.configure(text='''Autonomy Version''')

        self.entry_ui_two_version = tk.Entry(self.t_notebook_t8)
        self.entry_ui_two_version.place(relx=0.468, rely=0.563, height=30
                , relwidth=0.286)
        self.entry_ui_two_version.configure(background="white")
        self.entry_ui_two_version.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.entry_ui_two_version.configure(selectbackground="#c4c4c4")

        self.entry_ui_one_version = tk.Entry(self.t_notebook_t8)
        self.entry_ui_one_version.place(relx=0.468, rely=0.375, height=30
                , relwidth=0.286)
        self.entry_ui_one_version.configure(background="white")
        self.entry_ui_one_version.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.entry_ui_one_version.configure(selectbackground="#c4c4c4")

        self.entry_autonomy_version = tk.Entry(self.t_notebook_t8)
        self.entry_autonomy_version.place(relx=0.468, rely=0.188, height=30
                , relwidth=0.286)
        self.entry_autonomy_version.configure(background="white")
        self.entry_autonomy_version.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.entry_autonomy_version.configure(selectbackground="#c4c4c4")

        self.entry_vendor = tk.Entry(self.t_notebook_t8)
        self.entry_vendor.place(relx=0.468, rely=0.729, height=30
                , relwidth=0.286)
        self.entry_vendor.configure(background="white")
        self.entry_vendor.configure(font="-family {DejaVu Sans Mono} -size 12")
        self.entry_vendor.configure(selectbackground="#c4c4c4")

        self.txt_alerts = ScrolledListBox(top)
        self.txt_alerts.place(relx=0.0, rely=0.578, relheight=0.191
                , relwidth=0.992)
        self.txt_alerts.configure(background="white")
        self.txt_alerts.configure(cursor="xterm")
        self.txt_alerts.configure(font=font21)
        self.txt_alerts.configure(highlightcolor="#d9d9d9")
        self.txt_alerts.configure(selectbackground="#c4c4c4")

        self.health_alerts = ScrolledListBox(top)
        self.health_alerts.place(relx=0.0, rely=0.802, relheight=0.197
                , relwidth=0.992)
        self.health_alerts.configure(background="white")
        self.health_alerts.configure(cursor="xterm")
        self.health_alerts.configure(font=font21)
        self.health_alerts.configure(highlightcolor="#d9d9d9")
        self.health_alerts.configure(selectbackground="#c4c4c4")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    import threading, time
    thread1 = threading.Thread(target = vp_start_gui)
    thread1.daemon = True
    thread1.start()
    time.sleep(2)
    gui_support.listener()
